import base64
eval(compile(base64.b64decode(b'Y2xhc3MgU2ltdWxhdGlvbjoKICAiIiIKICBEZXNjcmliZXMgdGhlIHNpbXVsYXRpb24gc2V0dXAgKHRoZSB3b3JsZCwgdGhlIHBvcHVsYXRpb25zIG9mIHJhYmJpdHMgYW5kCiAgZm94ZXMsIGFuZCBpdHMgZXhlY3V0aW9uKS4gSW5zdGFuY2UgdmFyaWFibGVzICh3b3JsZCwgcmFiYml0cywgZm94ZXMsIGFuZAogIGV4ZWN1dGlvbikgYXJlIGluaXRpYWxpc2VkIHdpdGggYW4gaW5zdGFuY2Ugb2YgdGhlIGFwcHJvcHJpYXRlIGNsYXNzIChXb3JsZCwKICBQb3B1bGF0aW9uLCBvciBFeGVjdXRpb24pIGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCBwYXJhbWV0ZXJzLgogICIiIgoKICBfX3Nsb3RzX18gPSBbCiAgICAnX3dvcmxkJywKICAgICdfcmFiYml0cycsCiAgICAnX2ZveGVzJywKICAgICdfZXhlY3V0aW9uJwogICAgXQoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICBzZWxmLl93b3JsZCA9IFdvcmxkKCkKICAgIHNlbGYuX3JhYmJpdHMgPSBQb3B1bGF0aW9uKAogICAgICAncmFiYml0cycsCiAgICAgIDEwMCwgIyBpbml0aWFsX3NpemUKICAgICAgMywgICAjIG1ldGFib2xpc20KICAgICAgMjUsICAjIG1heF9hZ2UKICAgICAgNDUsICAjIG1heF9lbmVyZ3kKICAgICAgLjUsICAjIHJlcHJvZHVjdGlvbl9yYXRlCiAgICAgIDUsICAgIyByZXByb2R1Y3Rpb25fY29zdAogICAgICAxMCwgICMgcmVwcm9kdWN0aW9uX2FnZQogICAgICApCiAgICBzZWxmLl9mb3hlcyA9IFBvcHVsYXRpb24oCiAgICAgICdmb3hlcycsCiAgICAgIDMwLCAgIyBpbml0aWFsX3NpemUKICAgICAgMiwgICAjIG1ldGFib2xpc20KICAgICAgNTAsICAjIG1heF9hZ2UKICAgICAgMjAwLCAjIG1heF9lbmVyZ3kKICAgICAgLjUsICAjIHJlcHJvZHVjdGlvbl9yYXRlCiAgICAgIDEyMCwgIyByZXByb2R1Y3Rpb25fY29zdAogICAgICAxMCwgICMgcmVwcm9kdWN0aW9uX2FnZQogICAgICApCiAgICBzZWxmLl9leGVjdXRpb24gPSBFeGVjdXRpb24oKQoKICBAcHJvcGVydHkKICBkZWYgd29ybGQoc2VsZik6CiAgICAiIiIKICAgIFBhcmFtZXRlcnMgZm9yIHRoZSBzaW11bGF0ZWQgd29ybGQuIFNlZSBjbGFzcyBXb3JsZC4KICAgICIiIgogICAgcmV0dXJuIHNlbGYuX3dvcmxkCgogIEBwcm9wZXJ0eQogIGRlZiByYWJiaXRzKHNlbGYpOgogICAgIiIiCiAgICBQYXJhbWV0ZXJzIGZvciB0aGUgcmFiYml0IHBvcHVsYXRpb24uIFNlZSBjbGFzcyBQb3B1bGF0aW9uLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fcmFiYml0cwoKICBAcHJvcGVydHkKICBkZWYgZm94ZXMoc2VsZik6CiAgICAiIiIKICAgIFBhcmFtZXRlcnMgZm9yIHRoZSBmb3ggcG9wdWxhdGlvbi4gU2VlIGNsYXNzIFBvcHVsYXRpb24uCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9mb3hlcwoKICBAcHJvcGVydHkKICBkZWYgZXhlY3V0aW9uKHNlbGYpOgogICAgIiIiCiAgICBQYXJhbWV0ZXJzIGZvciB0aGUgc2ltdWxhdGlvbiBleGVjdXRpb24uIFNlZSBjbGFzcyBFeGVjdXRpb24uCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9leGVjdXRpb24KCiAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOgogICAgcmV0dXJuIGYid29ybGQ6IHtzZWxmLndvcmxkfVxue3NlbGYucmFiYml0c31cbntzZWxmLmZveGVzfVxuZXhlY3V0aW9uOiB7c2VsZi5leGVjdXRpb259IgoKICAgIApjbGFzcyBXb3JsZDoKICAiIiIKICBEZXNjcmliZXMgdGhlIHNpbXVsYXRlZCAyRCB3b3JsZCBpbiBpdHMgc2hhcGUgKHRvcm9pZCBvciBpc2xhbmQpIGFuZCBzaXplLgoKICBTZWUgX19pbml0X18gZm9yIGRlZmF1bHRzLgogICIiIgogIAogIF9fc2xvdHNfXyA9IFsKICAgICAgJ2lzX3Rvcm9pZCcsCiAgICAgICdfbm9ydGhfc291dGhfbGVuZ3RoJywKICAgICAgJ193ZXN0X2Vhc3RfbGVuZ3RoJwogICAgICBdCgogIGRlZiBfX2luaXRfXyhzZWxmLAogICAgICAgICAgICAgICBub3J0aF9zb3V0aF9sZW5ndGggPSAyMCwKICAgICAgICAgICAgICAgd2VzdF9lYXN0X2xlbmd0aCA9IDIwLAogICAgICAgICAgICAgICBpc190b3JvaWQgPSBUcnVlKToKICAgIHNlbGYuaXNfdG9yb2lkID0gaXNfdG9yb2lkCiAgICBzZWxmLm5vcnRoX3NvdXRoX2xlbmd0aCA9IG5vcnRoX3NvdXRoX2xlbmd0aAogICAgc2VsZi53ZXN0X2Vhc3RfbGVuZ3RoID0gd2VzdF9lYXN0X2xlbmd0aAoKICBkZWYgc2hhcGUoc2VsZikgLT4gc3RyOgogICAgIiIiCiAgICBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBzaGFwZSBvZiB0aGUgd29ybGQgKCd0b3JvaWQnIG9yICdpc2xhbmQnKS4KICAgICIiIgogICAgcmV0dXJuICd0b3JvaWQnIGlmIHNlbGYuaXNfdG9yb2lkIGVsc2UgJ2lzbGFuZCcKICAgIAogIEBwcm9wZXJ0eQogIGRlZiBub3J0aF9zb3V0aF9sZW5ndGgoc2VsZikgLT4gaW50OgogICAgIiIiCiAgICBUaGUgbm9ydGgtc291dGggbGVuZ3RoIG9mIHRoZSBzaW11bGF0ZWQgd29ybGQuCiAgICAKICAgIFByZWNvbmRpdGlvbjogaW50ZWdlciBhbmQgbm9uLW5lZ2F0aXZlLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fbm9ydGhfc291dGhfbGVuZ3RoCgogIEBub3J0aF9zb3V0aF9sZW5ndGguc2V0dGVyCiAgZGVmIG5vcnRoX3NvdXRoX2xlbmd0aChzZWxmLGxlbmd0aCA6IGludCk6CiAgICBzZWxmLl9ub3J0aF9zb3V0aF9sZW5ndGggPSBsZW5ndGgKCiAgQHByb3BlcnR5CiAgZGVmIHdlc3RfZWFzdF9sZW5ndGgoc2VsZikgLT4gaW50OgogICAgIiIiCiAgICBUaGUgd2VzdC1lYXN0IGxlbmd0aCBvZiB0aGUgc2ltdWxhdGVkIHdvcmxkLgogICAgCiAgICBQcmVjb25kaXRpb246IGludGVnZXIgYW5kIG5vbi1uZWdhdGl2ZS4KICAgICIiIgogICAgcmV0dXJuIHNlbGYuX3dlc3RfZWFzdF9sZW5ndGgKCiAgQHdlc3RfZWFzdF9sZW5ndGguc2V0dGVyCiAgZGVmIHdlc3RfZWFzdF9sZW5ndGgoc2VsZixsZW5ndGggOiBpbnQpOgogICAgc2VsZi5fd2VzdF9lYXN0X2xlbmd0aCA9IGxlbmd0aAoKICBkZWYgYXJlYShzZWxmKSAtPiBpbnQ6CiAgICAiIiIKICAgIFJldHVybnMgdGhlIHRvdGFsIGFyZWEgb2YgdGhlIHdvcmxkLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5ub3J0aF9zb3V0aF9sZW5ndGggKiBzZWxmLndlc3RfZWFzdF9sZW5ndGgKCiAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgcmV0dXJuIGYiV29ybGQoe3NlbGYubm9ydGhfc291dGhfbGVuZ3RofSx7c2VsZi53ZXN0X2Vhc3RfbGVuZ3RofSx7c2VsZi5pc190b3JvaWR9KSIKCiAgZGVmIF9fc3RyX18oc2VsZik6CiAgICByZXR1cm4gZiJ7c2VsZi5zaGFwZSgpfSB7c2VsZi5ub3J0aF9zb3V0aF9sZW5ndGh9IGJ5IHtzZWxmLndlc3RfZWFzdF9sZW5ndGh9IgogICAgCmNsYXNzIFBvcHVsYXRpb246CiAgIiIiCiAgRGVzY3JpYmVzIGEgcG9wdWxhdGlvbiBpbiB0aGUgc2ltdWxhdGlvbiAoZS5nLiwgcmFiYml0cykuCiAgIiIiCiAKICBfX3Nsb3RzX18gPSBbCiAgICAnX3NwZWNpZXMnLAogICAgJ19tYXhfYWdlJywKICAgICdfbWV0YWJvbGlzbScsCiAgICAnX21heF9lbmVyZ3knLAogICAgJ19pbml0aWFsX3NpemUnLAogICAgJ19yZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHknLAogICAgJ19yZXByb2R1Y3Rpb25fbWluX2VuZXJneScsCiAgICAnX3JlcHJvZHVjdGlvbl9taW5fYWdlJwogICAgXQoKICBkZWYgX19pbml0X18oc2VsZiwKICAgICAgICAgICAgICAgc3BlY2llcywKICAgICAgICAgICAgICAgaW5pdGlhbF9zaXplLAogICAgICAgICAgICAgICBtZXRhYm9saXNtLAogICAgICAgICAgICAgICBtYXhfYWdlLAogICAgICAgICAgICAgICBtYXhfZW5lcmd5LAogICAgICAgICAgICAgICByZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHksCiAgICAgICAgICAgICAgIHJlcHJvZHVjdGlvbl9taW5fZW5lcmd5LAogICAgICAgICAgICAgICByZXByb2R1Y3Rpb25fbWluX2FnZSk6CiAgICAiIiIKICAgIEFyZ3VtZW50czogc2VlIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgYW5kIGRhdGEgZGVzY3JpcHRvcnMuCiAgICAiIiIKICAgIHNlbGYuX3NwZWNpZXMgPSBzcGVjaWVzCiAgICBzZWxmLmluaXRpYWxfc2l6ZSA9IGluaXRpYWxfc2l6ZQogICAgc2VsZi5tZXRhYm9saXNtID0gbWV0YWJvbGlzbQogICAgc2VsZi5tYXhfYWdlID0gbWF4X2FnZQogICAgc2VsZi5tYXhfZW5lcmd5ID0gbWF4X2VuZXJneQogICAgc2VsZi5yZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHkgPSByZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHkKICAgIHNlbGYucmVwcm9kdWN0aW9uX21pbl9lbmVyZ3kgPSByZXByb2R1Y3Rpb25fbWluX2VuZXJneQogICAgc2VsZi5yZXByb2R1Y3Rpb25fbWluX2FnZSA9IHJlcHJvZHVjdGlvbl9taW5fYWdlCgogIEBwcm9wZXJ0eQogIGRlZiBzcGVjaWVzKHNlbGYpIC0+IHN0cjoKICAgICIiIgogICAgVGhlIHBvcHVsYXRpb24gc3BlY2llcyAoZS5nLiwncmFiYml0cycpLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fc3BlY2llcwoKICBAcHJvcGVydHkKICBkZWYgaW5pdGlhbF9zaXplKHNlbGYpIC0+IGludDoKICAgICIiIgogICAgVGhlIGluaXRpYWwgc2l6ZSBvZiB0aGUgcG9wdWxhdGlvLgogICAgCiAgICBQcmVjb25kaXRpb246IGludGVnZXIgYmV0d2VlbiAwIGFuZCB0aGUgYXZhbHVhYmxlIHN1cmZhY2UgYXJlYS4KICAgICIiIgogICAgcmV0dXJuIHNlbGYuX2luaXRpYWxfc2l6ZQoKICBAaW5pdGlhbF9zaXplLnNldHRlcgogIGRlZiBpbml0aWFsX3NpemUoc2VsZix2YWx1ZSk6CiAgICBzZWxmLl9pbml0aWFsX3NpemUgPSB2YWx1ZQoKICBAcHJvcGVydHkKICBkZWYgbWV0YWJvbGlzbShzZWxmKSAtPiBpbnQ6CiAgICAiIiIKICAgIFRoZSBhbW91bnQgb2YgZW5lcmd5IGNvbnN1bWVkIGR1cmluZyBlYWNoIHN0ZXAgb2YgdGhlIHNpbXVsYXRpb24uCgogICAgUHJlY29uZGl0aW9uOiBub24tbmVnYXRpdmUuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9tZXRhYm9saXNtCgogIEBtZXRhYm9saXNtLnNldHRlcgogIGRlZiBtZXRhYm9saXNtKHNlbGYsdmFsdWUpOgogICAgc2VsZi5fbWV0YWJvbGlzbSA9IHZhbHVlCgogIEBwcm9wZXJ0eQogIGRlZiBtYXhfYWdlKHNlbGYpIC0+IGludDoKICAgICIiIgogICAgVGhlIG1heGltdW0gYWdlIChpbiBzaW11bGF0aW9uIHN0ZXBzKSBhIG1lbWJlciBvZiB0aGlzIHNwZWNpZXMgY2FuIGhhdmUuCiAgICAKICAgIFByZWNvbmRpdGlvbjogaW50ZWdlciBhbmQgcG9zaXRpdmUuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9tYXhfYWdlCgogIEBtYXhfYWdlLnNldHRlcgogIGRlZiBtYXhfYWdlKHNlbGYsdmFsdWUpOgogICAgc2VsZi5fbWF4X2FnZSA9IHZhbHVlCgogIEBwcm9wZXJ0eQogIGRlZiBtYXhfZW5lcmd5KHNlbGYpIC0+IGludDoKICAgICIiIgogICAgVGhlIG1heGltdW0gZW5lcmd5IGxldmVsIGEgbWVtYmVyIG9mIHRoaXMgc3BlY2llcyBjYW4gaGF2ZS4KCiAgICBQcmVjb25kaXRpb246IHBvc2l0aXZlLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fbWF4X2VuZXJneQoKICBAbWF4X2VuZXJneS5zZXR0ZXIKICBkZWYgbWF4X2VuZXJneShzZWxmLHZhbHVlIDogaW50KToKICAgIHNlbGYuX21heF9lbmVyZ3kgPSB2YWx1ZQoKICBAcHJvcGVydHkKICBkZWYgcmVwcm9kdWN0aW9uX3Byb2JhYmlsaXR5KHNlbGYpIC0+IGZsb2F0OgogICAgIiIiCiAgICBUaGUgcHJvYmFiaWxpdHkgb2YgcmVwcm9kdWN0aW9uIHdoZW4gYWxsIGNvbmRpdGlvbnMgb24gYWdlLCBlbmVyZ3ksIGFuZCBlbnZpcm9ubWVudCBhcmUgbWV0LgogICAgCiAgICBQcmVjb25kaXRpb246IGEgZmxvYXRpbmcgcG9pbnQgdmFsdWUgcmVwcmVzZW50aW5nIGEgcHJvYmFiaWxpdHkuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9yZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHkKCiAgQHJlcHJvZHVjdGlvbl9wcm9iYWJpbGl0eS5zZXR0ZXIKICBkZWYgcmVwcm9kdWN0aW9uX3Byb2JhYmlsaXR5KHNlbGYsdmFsdWUpOgogICAgc2VsZi5fcmVwcm9kdWN0aW9uX3Byb2JhYmlsaXR5ID0gdmFsdWUKCiAgCiAgQHByb3BlcnR5CiAgZGVmIHJlcHJvZHVjdGlvbl9taW5fYWdlKHNlbGYpIC0+IGludDoKICAgICIiIgogICAgVGhlIG1pbmltdW0gYWdlIGFuIGluZGl2aWR1YWwgbXVzdCBoYXZlIGluIG9yZGVyIHRvIHJlcHJvZHVjZS4KICAgICIiIgogICAgcmV0dXJuIHNlbGYuX3JlcHJvZHVjdGlvbl9taW5fYWdlCgogIEByZXByb2R1Y3Rpb25fbWluX2FnZS5zZXR0ZXIKICBkZWYgcmVwcm9kdWN0aW9uX21pbl9hZ2Uoc2VsZix2YWx1ZSk6CiAgICBzZWxmLl9yZXByb2R1Y3Rpb25fbWluX2FnZSA9IHZhbHVlCgogIAogIEBwcm9wZXJ0eQogIGRlZiByZXByb2R1Y3Rpb25fbWluX2VuZXJneShzZWxmKSAtPiBpbnQ6CiAgICAiIiIKICAgIFRoZSBtaW5pbXVtIGVuZXJneSBsZXZlbCBhbiBpbmRpdmlkdWFsIG11c3QgaGF2ZSBpbiBvcmRlciB0byByZXByb2R1Y2UuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLl9yZXByb2R1Y3Rpb25fbWluX2VuZXJneQoKICBAcmVwcm9kdWN0aW9uX21pbl9lbmVyZ3kuc2V0dGVyCiAgZGVmIHJlcHJvZHVjdGlvbl9taW5fZW5lcmd5KHNlbGYsdmFsdWUpOgogICAgc2VsZi5fcmVwcm9kdWN0aW9uX21pbl9lbmVyZ3kgPSB2YWx1ZQoKICBkZWYgX19yZXByX18oc2VsZikgLT4gc3RyOgogICAgcmV0dXJuICJQb3B1bGF0aW9uKCd7fScsIHt9LCB7fSwge30sIHt9LCB7fSwge30sIHt9KSIuZm9ybWF0KAogICAgICBzZWxmLnNwZWNpZXMsCiAgICAgIHNlbGYuaW5pdGlhbF9zaXplLAogICAgICBzZWxmLm1ldGFib2xpc20sCiAgICAgIHNlbGYubWF4X2FnZSwKICAgICAgc2VsZi5tYXhfZW5lcmd5LAogICAgICBzZWxmLnJlcHJvZHVjdGlvbl9wcm9iYWJpbGl0eSwKICAgICAgc2VsZi5yZXByb2R1Y3Rpb25fbWluX2VuZXJneSwKICAgICAgc2VsZi5yZXByb2R1Y3Rpb25fbWluX2FnZSkKCiAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOgogICAgcmV0dXJuIGYiIiJ7c2VsZi5zcGVjaWVzfToge3NlbGYuaW5pdGlhbF9zaXplfQogIG1ldGFib2xpc206ICAgIHtzZWxmLm1ldGFib2xpc219CiAgbWF4X2FnZTogICAgICAge3NlbGYubWF4X2FnZX0KICBtYXhfZW5lcmd5OiAgICB7c2VsZi5tYXhfZW5lcmd5fQogIHJlcHJvZHVjdGlvbjoKICAgIHByb2JhYmlsaXR5OiB7c2VsZi5yZXByb2R1Y3Rpb25fcHJvYmFiaWxpdHl9CiAgICBjb3N0OiAgICAgICAge3NlbGYucmVwcm9kdWN0aW9uX21pbl9lbmVyZ3l9CiAgICBhZ2U6ICAgICAgICAge3NlbGYucmVwcm9kdWN0aW9uX21pbl9hZ2V9IiIiCgpjbGFzcyBFeGVjdXRpb246CiAgIiIiCiAgQ29udGFpbnMgcGFyYW1ldGVycyBmb3IgdGhlIHNpbXVsYXRpb24gZXhlY3V0aW9uLgoKICBTZWUgX19pbml0X18gZm9yIGRlZmF1bHRzLgogICIiIgogIAogIF9fc2xvdHNfXyA9IFsKICAgICAgJ19tYXhfc3RlcHMnLAogICAgICAnX3N0ZXBfZGVsYXknLAogICAgICAnX2JhdGNoJwogICAgICBdCgogIGRlZiBfX2luaXRfXyhzZWxmLAogICAgICAgICAgICAgICBtYXhfc3RlcHMgPSAxMDAwLAogICAgICAgICAgICAgICBzdGVwX2RlbGF5ID0gMC4xLAogICAgICAgICAgICAgICBiYXRjaCA9IFRydWUpOgogICAgc2VsZi5tYXhfc3RlcHMgPSBtYXhfc3RlcHMKICAgIHNlbGYuc3RlcF9kZWxheSA9IHN0ZXBfZGVsYXkKICAgIHNlbGYuYmF0Y2ggPSBiYXRjaAoKICBAcHJvcGVydHkKICBkZWYgbWF4X3N0ZXBzKHNlbGYpIC0+IGludDoKICAgICIiIgogICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0ZXBzIHRoZSBzaW11bGF0aW9uIGNhbiBydW4gZm9yLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fbWF4X3N0ZXBzCgogIEBtYXhfc3RlcHMuc2V0dGVyCiAgZGVmIG1heF9zdGVwcyhzZWxmLHZhbHVlKToKICAgIHNlbGYuX21heF9zdGVwcyA9IHZhbHVlCgoKICBAcHJvcGVydHkKICBkZWYgc3RlcF9kZWxheShzZWxmKSAtPiBmbG9hdDoKICAgICIiIgogICAgQSBkZWxheSAoaW4gc2Vjb25kcykgYWRkZWQgdG8gZWFjaCBzdGVwIG9mIHRoZSBzaW11bGF0aW9uLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5fc3RlcF9kZWxheQoKICBAc3RlcF9kZWxheS5zZXR0ZXIKICBkZWYgc3RlcF9kZWxheShzZWxmLHZhbHVlKToKICAgIHNlbGYuX3N0ZXBfZGVsYXkgPSB2YWx1ZQoKCiAgQHByb3BlcnR5CiAgZGVmIGJhdGNoKHNlbGYpIC0+IGJvb2w6CiAgICAiIiIKICAgIFdoZXRoZXIgdGhlIHNpbXVsYXRpb24gZXhlY3V0ZWQgaW4gYmF0Y2ggbW9kZSAobm8gdmlzdWFsaXphdGlvbikgb3IgdmlzdWFsaXNpbmcgaXRzIHN0YXR1cy4KICAgICIiIgogICAgcmV0dXJuIHNlbGYuX2JhdGNoCgogIEBiYXRjaC5zZXR0ZXIKICBkZWYgYmF0Y2goc2VsZix2YWx1ZSk6CiAgICBzZWxmLl9iYXRjaCA9IHZhbHVlCgogIGRlZiBtb2RlKHNlbGYpIC0+IHN0cjoKICAgICIiIgogICAgUmV0dXJucyB0aGUgbW9kZSBvZiBleGVjdXRpb24gKGJhdGNoIG9yIHZpc3VhbCkgYXMgYSBzdHJpbmcuCiAgICAiIiIKICAgIHJldHVybiAnYmF0Y2gnIGlmIHNlbGYuYmF0Y2ggZWxzZSAndmlzdWFsJwoKICBkZWYgX19yZXByX18oc2VsZikgLT4gc3RyOgogICAgcmV0dXJuIGYiRXhlY3V0aW9uKHtzZWxmLm1heF9zdGVwc30se3NlbGYuc3RlcF9kZWxheX0se3NlbGYuYmF0Y2h9KSIKCiAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOgogICAgcmV0dXJuIGYie3NlbGYubW9kZSgpfSBtb2RlLCB7c2VsZi5tYXhfc3RlcHN9IHN0ZXBzIHdpdGggYSBkZWxheSB7c2VsZi5zdGVwX2RlbGF5fXMiCg=='),'<string>','exec'))
